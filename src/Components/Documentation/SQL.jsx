/* eslint-disable react-refresh/only-export-components */

import { Link } from "react-router-dom";

const SQL = () => {
  return (
    <div className="bg-gradient-to-r from-[#452424] to-[#202020] min-h-screen p-6 sm:p-8 text-white">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl sm:text-4xl font-bold mb-6 text-center border-b-2 border-gray-500 pb-4">
          SQL Injection Prevention and Detection
        </h1>

        <section className="mb-8 p-4 bg-gray-800 bg-opacity-60 rounded-lg shadow-lg text-justify">
          <p className="text-base sm:text-lg leading-relaxed mb-4">
            SQL Injection (SQLI) is a common web application vulnerability that allows attackers to interfere with the queries that an application makes to its database. By exploiting SQLI, attackers can access, modify, or delete sensitive data, and in some cases, execute administrative operations on the database.
          </p>

          <h3 className="text-lg sm:text-2xl font-semibold mb-3 text-orange-400">1. Input Validation</h3>
          <p className="text-base sm:text-lg leading-relaxed mb-4">
            Input validation is a process used to ensure that data entered into a system follows predefined criteria or rules before it is accepted and processed.
          </p>
          
          <h4 className="text-md sm:text-xl font-semibold mb-2">i. Automated Regular Expression</h4>
          <div className="ml-3 mb-4">
            <ul className="list-disc list-inside text-base sm:text-lg leading-relaxed mb-4">
              <li className="mb-1">
                Automated regular expressions can dynamically generate patterns based on the input data and the requirements of the application. This flexibility allows for adaptive security measures that can evolve to address emerging threats and vulnerabilities.
              </li>
              <li className="mb-1">
                The developer will enter into our system by logging in. Then, they will choose the SQL injection prevention method. After that, the developer can proceed with input sanitization/validation (method 1). Here, a developer can check any input inside the code editor to see whether it contains any malicious code or not. If the input does not contain any malicious code, then the system will give a verdict that no action is needed. However, if there is malicious code present, our system will provide an automated regular expression that can detect this query further, and all of the functionalities will be implemented on the database system.
              </li>
              <li className="mb-1">
                This automated regular expression has been developed in such a way that for every individual malicious query, a new regular expression will be generated by our system for detection. The developer can then copy that portion to use for further processing.
              </li>
            </ul> 
          </div>

          <h4 className="text-md sm:text-xl font-semibold mb-2">ii. Implementation of <code>stripcslashes()</code> & <code>mysqli_real_escape_string()</code></h4>
          <div className="ml-3">
            <ul className="list-disc list-inside text-base sm:text-lg leading-relaxed mb-6">
              <li className="mb-1">
                The PHP <code>stripcslashes()</code> method removes backslashes added by the <code>addslashes()</code> function. This is particularly useful when working with data extracted from databases where <code>addslashes()</code> might have been used to escape special characters before insertion. By using <code>stripcslashes()</code>, we ensure that the data is returned to its original form and is safe for further processing.
              </li>
              <li className="mb-1">
                The <code>mysqli_real_escape_string()</code> function is designed to escape special characters in a string, ensuring it is safe for use in SQL queries. By inserting escape characters (\\) before characters with particular meanings in SQL queries, such as quotes (’ and ”), this function effectively prevents SQL injection attempts by preventing these characters from being interpreted as part of the query syntax.
              </li>
            </ul>
          </div>
      
        </section>

        <section className="mb-8 p-4 bg-gray-800 bg-opacity-60 rounded-lg shadow-lg text-justify">
          <h3 className="text-lg sm:text-2xl font-semibold mb-3 text-orange-400">2. Stored Procedure & Parameterized Queries (From PHP Library)</h3>
          <p className="text-base sm:text-lg leading-relaxed mb-4">
            Precompiled SQL queries are kept on the database server as stored procedures. Instead of creating SQL queries dynamically, they enable programs to carry out specified procedures by encapsulating SQL functionality within the database itself. SQL statements with placeholders for parameters are known as parameterized queries.
          </p>

          <h4 className="text-md sm:text-xl font-semibold mb-2">i. Using <code>prepare()</code> or <code>mysqli_prepare()</code> for SQL Statements</h4>
          <ul className="list-disc list-inside text-base sm:text-lg leading-relaxed mb-4 ml-3">
            <li className="mb-1">
              <code>prepare()</code> is a PDO (PHP Data Objects) method used to prepare SQL statements for execution.
            </li>
            <li className="mb-1">
              It accepts an SQL query with placeholders for parameters and returns a PDOStatement object representing the prepared statement.
            </li>
            <li className="mb-1">
              Parameters are bound to placeholders using the <code>bindParam()</code> or <code>bindValue()</code> methods of the PDOStatement object.
            </li>
          </ul>

          <h4 className="text-md sm:text-xl font-semibold mb-2">ii. Using <code>bind_param()</code> or <code>mysqli_stmt_bind_param()</code> for Binding Parameters</h4>
          <ul className="list-disc list-inside text-base sm:text-lg leading-relaxed mb-4 ml-3">
            <li className="mb-1">
              <code>bind_param()</code> function (MySQLi): The MySQLi_STMT class contains the <code>bind_param()</code> method, which is used to bind arguments to placeholders in prepared statements.
            </li>
            <li className="mb-1">
              It takes references to variables holding the parameter values as well as parameter types.
            </li>
            <li className="mb-1">
              The parameter types, which are represented by characters like ”s” for string, ”i” for integer, ”d” for double, and ”b” for blob, define the data type of each parameter.
            </li>
          </ul>

          <h4 className="text-md sm:text-xl font-semibold mb-2">iii. Using <code>execute()</code> or <code>mysqli_stmt_execute()</code> for Executing Prepared Statements</h4>
          <ul className="list-disc list-inside text-base sm:text-lg leading-relaxed mb-4 ml-3">
            <li className="mb-1">
              The PDOStatement class has an <code>execute()</code> function that is used to run a prepared statement.
            </li>
            <li className="mb-1">
              It does not take any parameters and outputs a boolean value that indicates if the execution was successful or not.
            </li>
          </ul>
        </section>

        <section className="mb-8 p-4 bg-gray-800 bg-opacity-60 rounded-lg shadow-lg text-justify">
          <h3 className="text-lg sm:text-2xl font-semibold mb-3 text-orange-400">3. Cryptography in SQL Injection Prevention Methods</h3>
          <p className="text-base sm:text-lg leading-relaxed mb-4">
            Cryptography can significantly prevent SQL Injection attacks by protecting sensitive data stored in databases. Here are some methods of incorporating cryptography into SQL Injection prevention:
          </p>

          <h4 className="text-md sm:text-xl font-semibold  mb-2">i. Password Hashing Using Bcrypt</h4>
          <ul className="list-disc list-inside text-base sm:text-lg leading-relaxed mb-4 ml-6">
            <li className="mb-1">
              The <strong>password_hash()</strong> function is used to produce hashed passwords; it is likely a part of a specific programming language or framework. Bcrypt is a cryptographic hash function that makes brute-force attacks computationally difficult to prevent. This function hashes the password that the user creates, and the hash that is produced is kept in the database instead of the password in plain text.
            </li>
            <li className="mb-1">
              <strong>PASSWORD_BCRYPT Algorithm:</strong> This refers to the specific bcrypt hashing algorithm used by the <code>password_hash()</code> function.
            </li>
          </ul>

          <h4 className="text-md sm:text-xl font-semibold  mb-2">ii. Encryption and Decryption</h4>
          <ul className="list-disc list-inside text-base sm:text-lg leading-relaxed mb-4 ml-6">
            <li className="mb-1">
              The <code>openssl_encrypt()</code> function is a PHP function that provides encryption capabilities using the OpenSSL library.
            </li>
            <li className="mb-1">
              This function allows developers to encrypt data using various encryption algorithms and options supported by the OpenSSL library. It provides a convenient and flexible way to encrypt sensitive information before storing or transmitting it.
            </li>
            <li className="mb-1">
              The <code>openssl_decrypt()</code> function is the counterpart of <code>openssl_encrypt()</code> and is used to decrypt data that was previously encrypted using <code>openssl_encrypt()</code>.
            </li>
          </ul>
        </section>
        
        <Link to="/services/sql" className="block mt-6 text-center">
          <button className="bg-orange-500 hover:bg-orange-600 text-white font-semibold py-2 px-6 rounded-md transition duration-300">
            Explore More
          </button>
        </Link>
      </div>
    </div>
  );
};

export default SQL;
