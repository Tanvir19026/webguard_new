import { useState } from 'react';
import { FaExclamationTriangle, FaThumbsUp } from 'react-icons/fa';
import cleanImage from '../../../assets/virus-protection-vector-illustration-with-people-use-shield-sword-protect-from-malware-concept_258153-559.png'; // Replace with actual path
import malwareImage from '../../../assets/virus-malware-detected-concept-viruses-attack-warning-signs-hacking-alert-messages-vector.jpg'; // Replace with actual path

function MalwareDetection() {
  const [selectedFile, setSelectedFile] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    setSelectedFile(file);

    if (file) {
      const fileName = file.name;
      console.log('Selected file:', fileName); // For debugging (replace with UI display)
    }
  };

  const detectMalware = (fileContent) => {
    // Simulate checking file content for malware signatures
    const malwareSignatures = ['malware', 'virus', 'trojan', 'worm'];
    return malwareSignatures.some(signature => fileContent.includes(signature));
  };

  const handleScanClick = async () => {
    if (!selectedFile) {
      alert('Please select a file to scan.');
      return;
    }

    setIsAnalyzing(true);
    setResult(null); // Clear previous result

    const reader = new FileReader();

    reader.onload = (e) => {
      const fileContent = e.target.result;

      // Simulate malware detection logic (replace with actual API call)
      const isMalware = detectMalware(fileContent);

      setIsAnalyzing(false);
      setResult(isMalware ? 'Malware Detected' : 'File is Clean');
    };

    reader.readAsText(selectedFile);
  };

  return (
    <div className="flex flex-col items-center p-6  bg-gradient-to-r from-[#452424] to-[#202020] min-h-screen">

      <div className="w-full max-w-md bg-gradient-to-r from-gray-400 to-black-600 rounded-lg shadow-lg p-6 border-2 border-gray-400">
        <div className="mb-4">
          <input
            type="file"
            accept=".exe, .pdf, .docx"
            onChange={handleFileChange}
            id="file-input"
            className="hidden"
          />
          <label
            htmlFor="file-input"
            className="block text-lg font-medium text-gray-700 cursor-pointer bg-white border border-gray-300 rounded-md p-2 text-center hover:bg-gray-200"
          >
            {selectedFile ? selectedFile.name : 'Select a file'}
          </label>
        </div>
        <button
          onClick={handleScanClick}
          disabled={isAnalyzing}
          className={`w-full py-2 px-4 bg-blue-500 text-white text-lg rounded-md ${
            isAnalyzing ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-600'
          }`}
        >
          {isAnalyzing ? 'Scanning...' : 'Scan File'}
        </button>
        {result && (
          <div
            className={`mt-4 p-3 text-xl text-center rounded-md ${
              result === 'Malware Detected' ? 'bg-red-500 text-white' : 'bg-green-500 text-white'
            }`}
          >
            {result === 'Malware Detected' ? (
              <>
                <FaExclamationTriangle className="inline-block mr-2" />
                Malware Detected
              </>
            ) : (
              <>
                <FaThumbsUp className="inline-block mr-2" />
                File is Clean
              </>
            )}
          </div>
        )}
        {isAnalyzing && (
          <div className="mt-4 flex justify-center">
            <div className="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12"></div>
          </div>
        )}
      </div>
      {result && (
        <img
          src={result === 'Malware Detected' ? malwareImage : cleanImage}
          alt={result}
          className="mt-6 w-full max-w-md h-auto rounded-lg shadow-lg"
        />
      )}
    </div>
  );
}

export default MalwareDetection;
